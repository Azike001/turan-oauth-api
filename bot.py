import os
import sys
import logging
import gspread
import asyncio
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from oauth2client.service_account import ServiceAccountCredentials
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# üîê –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
LOCKFILE = "/data/data/com.termux/files/home/bot.lock"
if os.path.exists(LOCKFILE):
    print("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –í—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    sys.exit()
with open(LOCKFILE, "w") as f:
    f.write("running")

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8080091792:AAED9X1dxlMDy3Xca5qwjGlzRIS31VGAkdA"
CHANNEL_ID = "@turanmarket001"
ADMIN_ID = 6608247548
SPREADSHEET_NAME = "AliExpress Turan Market"

# üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(creds)
sheet = client.open(SPREADSHEET_NAME).sheet1

# üõí –ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π
posted_titles = []

# üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def notify_admin(bot: Bot, message: str):
    try:
        await bot.send_message(chat_id=ADMIN_ID, text=message)
    except Exception as e:
        logging.error(f"[‚úó] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Å—ã–ª–∫–∏
def clean_url(url):
    if "http" in url:
        parts = url.split("http")
        return "http" + parts[1].strip()
    return url.strip()

# üì¶ –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞
async def publish_next_product(app: Application):
    try:
        records = sheet.get_all_records()
        for row in records:
            title = row.get("–ù–∞–∑–≤–∞–Ω–∏–µ", "").strip()
            price = row.get("–¶–µ–Ω–∞", "").strip()
            url = clean_url(row.get("–°—Å—ã–ª–∫–∞", ""))
            image = row.get("–ö–∞—Ä—Ç–∏–Ω–∫–∞", "").strip()
            is_partner = str(row.get("–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è", "")).strip()

            if title in posted_titles or is_partner != "‚úÖ":
                continue

            if not url.startswith("http"):
                continue

            text = f"üõçÔ∏è <b>{title}</b>\nüí∞ –¶–µ–Ω–∞: {price}"
            button = InlineKeyboardMarkup([[InlineKeyboardButton("üîó –ö—É–ø–∏—Ç—å", url=url)]])

            try:
                if image and image.startswith("http"):
                    await app.bot.send_photo(chat_id=CHANNEL_ID, photo=image, caption=text, reply_markup=button, parse_mode="HTML")
                else:
                    await app.bot.send_message(chat_id=CHANNEL_ID, text=text, reply_markup=button, parse_mode="HTML")
            except Exception as e:
                await app.bot.send_message(chat_id=CHANNEL_ID, text=text, reply_markup=button, parse_mode="HTML")
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

            posted_titles.append(title)
            await notify_admin(app.bot, f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {title}")
            break
    except Exception as e:
        await notify_admin(app.bot, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

# üßæ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    name = user.first_name or "–¥—Ä—É–≥"
    welcome = f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {name}!</b>\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TURAN Market!\n\nüõí –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ª—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã —Å AliExpress —Å —É–¥–æ–±–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –ø–æ–∫—É–ø–∫–∏.\n\nüì¶ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status, /next –∏–ª–∏ /stop (–¥–ª—è –∞–¥–º–∏–Ω–∞)."
    menu = InlineKeyboardMarkup([
        [InlineKeyboardButton("üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", url="https://t.me/turanmarket001")],
        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/ASICCHIP")]
    ])
    await update.message.reply_text(welcome, reply_markup=menu, parse_mode="HTML")

# üëÆ –ö–æ–º–∞–Ω–¥–∞ /status
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID:
        await update.message.reply_text(f"üìä –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(posted_titles)}")
    else:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

# ‚è≠Ô∏è –ö–æ–º–∞–Ω–¥–∞ /next
async def next_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID:
        await publish_next_product(context.application)
        await update.message.reply_text("‚è≠ –°–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
    else:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

# üõë –ö–æ–º–∞–Ω–¥–∞ /stop
async def stop_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID:
        await notify_admin(context.bot, "‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
        await context.application.shutdown()
        if os.path.exists(LOCKFILE):
            os.remove(LOCKFILE)
        sys.exit()
    else:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("next", next_post))
    app.add_handler(CommandHandler("stop", stop_bot))

    scheduler = AsyncIOScheduler()
    scheduler.add_job(publish_next_product, "interval", args=[app], minutes=3)
    scheduler.start()

    await notify_admin(app.bot, "ü§ñ TURAN MARKET –∑–∞–ø—É—â–µ–Ω!")
    await publish_next_product(app)
    await app.run_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    finally:
        if os.path.exists(LOCKFILE):
            os.remove(LOCKFILE)

